{
    "version": 3,
    "sources": [
        "assets/images/spinner.gif",
        "components/City.js",
        "components/Restaurants.js",
        "components/BodyComponent.js",
        "App.js",
        "serviceWorker.js",
        "reducers/rootReducer.js",
        "index.js"
    ],
    "names": [
        "module",
        "exports",
        "__webpack_require__",
        "p",
        "cities",
        "dataSource",
        "City",
        "state",
        "loading",
        "handleSelect",
        "citySelected",
        "_this",
        "props",
        "handleSelectCity",
        "this",
        "getCities",
        "setState",
        "axios",
        "get",
        "Object",
        "objectSpread",
        "data",
        "console",
        "log",
        "error",
        "_context",
        "t0",
        "react_default",
        "a",
        "createElement",
        "auto_complete",
        "style",
        "width",
        "placeholder",
        "onSelect",
        "filterOption",
        "inputValue",
        "option",
        "children",
        "toUpperCase",
        "indexOf",
        "React",
        "Component",
        "connect",
        "dispatch",
        "type",
        "restaurants",
        "Restaurants",
        "loaded",
        "price",
        "getRestaurantsDefault",
        "prevProps",
        "_this2",
        "concat",
        "then",
        "res",
        "catch",
        "err",
        "_this3",
        "Meta",
        "Card",
        "_this$state",
        "row",
        "gutter",
        "justify",
        "align",
        "map",
        "restaurant",
        "i",
        "renderSwitch",
        "restaurant_details",
        "address",
        "city",
        "col",
        "key",
        "value",
        "xs",
        "span",
        "md",
        "lg",
        "xl",
        "card",
        "hoverable",
        "cover",
        "alt",
        "name",
        "src",
        "image_url",
        "title",
        "description",
        "href",
        "reserve_url",
        "target",
        "rel",
        "es_button",
        "textAlign",
        "height",
        "spinner",
        "Content",
        "Layout",
        "BodyComponent",
        "minHeight",
        "marginTop",
        "className",
        "components_City",
        "components_Restaurants",
        "App",
        "components_BodyComponent",
        "react",
        "Boolean",
        "window",
        "location",
        "hostname",
        "match",
        "initState",
        "rootReducer",
        "arguments",
        "length",
        "undefined",
        "action",
        "store",
        "createStore",
        "compose",
        "ReactDOM",
        "render",
        "es",
        "src_App",
        "document",
        "getElementById",
        "navigator",
        "serviceWorker",
        "ready",
        "registration",
        "unregister"
    ],
    "mappings": "6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0SCOpCC,EAAS,GACTC,EAAa,GACXC,6MACJC,MAAQ,CACNH,OAAQ,GACRI,SAAS,KAsBXC,aAAe,SAAAC,GAEbC,EAAKC,MAAMC,iBAAiBH,uFArB5BI,KAAKC,+JAILD,KAAKE,SAAS,CACZR,SAAS,sBAGMS,IAAMC,IAAI,oDAAzBd,SACAU,KAAKE,SAALG,OAAAC,EAAA,EAAAD,CAAA,GACKL,KAAKP,MADV,CAEEH,OAAQA,EAAOiB,KAAKjB,OACpBI,SAAS,qDAGXc,QAAQC,IAAI,yBACZD,QAAQC,IAAI,CAAEC,MAAKC,EAAAC,iJASrBrB,EAAaS,KAAKP,MAAMH,OADjB,IAECI,EAAYM,KAAKP,MAAjBC,QACR,OAAIA,EAEAmB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAO,CAAEC,MAAO,QAChBC,YAAY,sBAKfzB,OAAL,EAEImB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEI,SAAUpB,KAAKL,aACfsB,MAAO,CAAEC,MAAO,QAChB3B,WAAYA,EACZ4B,YAAY,mBACZE,aAAc,SAACC,EAAYC,GAAb,OAG8B,IAF1CA,EAAOzB,MAAM0B,SACVC,cACAC,QAAQJ,EAAWG,0BAtDjBE,IAAMC,WA0EVC,cACb,KAbyB,SAAAC,GACzB,MAAO,CACL/B,iBAAkB,SAAAH,GAChBkC,EAAS,CAAEC,KAAM,mBAAoBnC,oBAS5BiC,CAGbrC,yDC/EEwC,EAAc,GAEZC,6MACJxC,MAAQ,CACNuC,YAAa,GACbE,QAAQ,EACRxC,SAAS,+EAGEyC,GACX,OAAQA,GACN,KAAK,EACH,MAAO,GACT,KAAK,EACH,MAAO,IACT,KAAK,EACH,MAAO,KACT,KAAK,EACH,MAAO,MACT,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,QACT,QACE,MAAO,iDAMXnC,KAAKoC,+MAIuBjC,IAAMC,IAAN,sEAApB4B,SAINhC,KAAKE,SAAS,CACZ8B,YAAaA,EAAYzB,KAAKyB,YAC9BE,QAAQ,oDAGV1B,QAAQC,IAAI,CAAEC,MAAKC,EAAAC,2JAIJyB,GAAW,IAAAC,EAAAtC,KAC5BA,KAAKF,MAAMF,eAAiByC,EAAUzC,cACtCO,IACGC,IADH,uDAAAmC,OAGMvC,KAAKF,MAAMF,eAGd4C,KAAK,SAAAC,GACJT,EAAcS,EAAIlC,KAAKyB,YACvBM,EAAKpC,SAAS,CACZ8B,cACAE,QAAQ,EACRxC,SAAS,MAGZgD,MAAM,SAAAC,GACLnC,QAAQC,IAAI,CAAEkC,2CAIX,IAAAC,EAAA5C,KACC6C,EAASC,IAATD,KADDE,EAGqB/C,KAAKP,MAAzByC,EAHDa,EAGCb,OAAQxC,EAHTqD,EAGSrD,QAEhB,OAAIwC,EAEArB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAKC,OAAQ,GAAIlB,KAAK,OAAOmB,QAAQ,eAAeC,MAAM,UACvDnD,KAAKP,MAAMuC,YAAYoB,IAAI,SAACC,EAAYC,GACvC,IAAInB,EAAQS,EAAKW,aAAaF,EAAWlB,OACrCqB,EACFH,EAAWI,QAAU,IAAMJ,EAAWK,KAAO,IAAMvB,EACrD,OACEtB,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CACEC,IAAKN,EACLO,MAAO,IACPC,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,IACZE,GAAI,CAAEF,KAAM,GACZG,GAAI,CAAEH,KAAM,IAEZlD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CACEC,WAAS,EACTC,MACExD,EAAAC,EAAAC,cAAA,OAAKuD,IAAKjB,EAAWkB,KAAMC,IAAKnB,EAAWoB,aAG7C5D,EAAAC,EAAAC,cAAC8B,EAAD,CACE6B,MAAOrB,EAAWkB,KAClBI,YAAanB,IACZ,IACH3C,EAAAC,EAAAC,cAAA,WAAO,IACPF,EAAAC,EAAAC,cAAA,KACEuD,IAAI,gBACJM,KAAMvB,EAAWwB,YACjBC,OAAO,SACPC,IAAI,uBAEH,IACDlE,EAAAC,EAAAC,cAACiE,EAAA,EAAD,CAAQjD,KAAK,UAAb,kBACG,UASjBrC,EAEAmB,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLgE,UAAW,WAGbpE,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLC,MAAO,MACPgE,OAAQ,OAEVZ,IAAI,UACJE,IAAKW,YAbb,SApHsBxD,IAAMC,WAmJjBC,cAVS,SAAApC,GACtB,MAAO,CACLG,aAAcH,EAAMG,eAQTiC,CAAyBI,GCtJhCmD,SAAYC,EAAZD,QAUOE,EATO,kBAEtBzE,EAAAC,EAAAC,cAACqE,EAAD,CAASnE,MAAO,CAAEsE,UAAW,QAASC,UAAU,SAChD3E,EAAAC,EAAAC,cAAA,OAAK0E,UAAU,aACP5E,EAAAC,EAAAC,cAAC2E,EAAD,MACA7E,EAAAC,EAAAC,cAAC4E,EAAD,SCCOC,mLARX,OACE/E,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8E,EAAD,cAJUC,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uEClBEC,EAAY,CACdxG,aAAe,WAgBJyG,EAbK,WAA+B,IAA9B5G,EAA8B6G,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBF,EAAWK,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnD,OAAOC,EAAO1E,MACV,IAAK,mBACD,OAAO1B,OAAAC,EAAA,EAAAD,CAAA,GACAZ,EADP,CAEIG,aAAc6G,EAAO7G,eAE7B,QACI,OAAOH,ICHTiH,EAAQC,YAAYN,EAAaO,eAEvCC,IAASC,OAAOjG,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAUL,MAAOA,GAAO7F,EAAAC,EAAAC,cAACiG,EAAD,OAAoBC,SAASC,eAAe,SFsH9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7E,KAAK,SAAA8E,GACjCA,EAAaC",
    "file": "static/js/main.0796d8e0.chunk.js",
    "sourcesContent": [
        "module.exports = __webpack_public_path__ + \"static/media/spinner.b471c370.gif\";",
        "import React from \"react\";\nimport axios from \"axios\";\nimport { AutoComplete } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport { connect } from \"react-redux\";\nimport propTypes from \"prop-types\";\n\nlet cities = [];\nlet dataSource = [];\nclass City extends React.Component {\n  state = {\n    cities: [],\n    loading: true\n  };\n  componentDidMount() {\n    this.getCities();\n  }\n\n  async getCities() {\n    this.setState({\n      loading: true\n    });\n    try {\n      cities = await axios.get(\"https://opentable.herokuapp.com/api/cities\");\n      this.setState({\n        ...this.state,\n        cities: cities.data.cities,\n        loading: false\n      });\n    } catch (error) {\n      console.log(\"Something Went Wrong!\");\n      console.log({ error });\n    }\n  }\n  handleSelect = citySelected => {\n    // Update State With Redux\n    this.props.handleSelectCity(citySelected);\n  };\n\n  render() {\n    dataSource = this.state.cities;\n    const { loading } = this.state;\n    if (loading) {\n      return (\n        <div>\n          <AutoComplete\n            style={{ width: \"100%\" }}\n            placeholder=\"Select Your City\"\n          />\n        </div>\n      );\n    }\n    if (!loading) {\n      return (\n        <div>\n          <AutoComplete\n            onSelect={this.handleSelect}\n            style={{ width: \"100%\" }}\n            dataSource={dataSource}\n            placeholder=\"Select Your City\"\n            filterOption={(inputValue, option) =>\n              option.props.children\n                .toUpperCase()\n                .indexOf(inputValue.toUpperCase()) !== -1\n            }\n          />\n        </div>\n      );\n    }\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleSelectCity: citySelected => {\n      dispatch({ type: \"SHOW_RESTAURANTS\", citySelected });\n    }\n  };\n};\n\nCity.propTypes = {\n  handleSelectCity: propTypes.func.isRequired\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(City);\n",
        "import React from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { Row, Col, Card, Button } from \"antd\";\nimport spinner from \"../assets/images/spinner.gif\";\nimport propTypes from \"prop-types\";\n\nlet restaurants = [];\n\nclass Restaurants extends React.Component {\n  state = {\n    restaurants: [],\n    loaded: false,\n    loading: true\n  };\n\n  renderSwitch(price) {\n    switch (price) {\n      case 0:\n        return \"\";\n      case 1:\n        return \"$\";\n      case 2:\n        return \"$$\";\n      case 3:\n        return \"$$$\";\n      case 4:\n        return \"$$$$\";\n      case 5:\n        return \"$$$$$\";\n      default:\n        return \"\";\n    }\n  }\n\n  // Default City = Toronto\n  componentWillMount() {\n    this.getRestaurantsDefault();\n  }\n  async getRestaurantsDefault() {\n    try {\n      const restaurants = await axios.get(\n        `https://opentable.herokuapp.com/api/restaurants?city=toronto`\n      );\n      // console.log(restaurants.data.restaurants)\n      this.setState({\n        restaurants: restaurants.data.restaurants,\n        loaded: true\n      });\n    } catch (error) {\n      console.log({ error });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    this.props.citySelected !== prevProps.citySelected &&\n    axios\n      .get(\n        `https://opentable.herokuapp.com/api/restaurants?city=${\n          this.props.citySelected\n        }`\n      )\n      .then(res => {\n        restaurants = res.data.restaurants;\n        this.setState({\n          restaurants,\n          loaded: true,\n          loading: false\n        });\n      })\n      .catch(err => {\n        console.log({ err });\n      });\n  }\n\n  render() {\n    const { Meta } = Card;\n\n    const { loaded, loading } = this.state;\n\n    if (loaded) {\n      return (\n        <div>\n          <Row gutter={48} type=\"flex\" justify=\"space-around\" align=\"middle\">\n            {this.state.restaurants.map((restaurant, i) => {\n              let price = this.renderSwitch(restaurant.price);\n              let restaurant_details =\n                restaurant.address + \" \" + restaurant.city + \" \" + price;\n              return (\n                <Col\n                  key={i}\n                  value={100}\n                  xs={{ span: 24 }}\n                  md={{ span: 12 }}\n                  lg={{ span: 8 }}\n                  xl={{ span: 6 }}\n                >\n                  <Card\n                    hoverable\n                    cover={\n                      <img alt={restaurant.name} src={restaurant.image_url} />\n                    }\n                  >\n                    <Meta\n                      title={restaurant.name}\n                      description={restaurant_details}\n                    />{\" \"}\n                    <br />{\" \"}\n                    <a\n                      alt=\"Reserve Table\"\n                      href={restaurant.reserve_url}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {\" \"}\n                      <Button type=\"danger\">Reserve Table</Button>\n                    </a>{\" \"}\n                  </Card>\n                </Col>\n              );\n            })}\n          </Row>\n        </div>\n      );\n    }\n    if (loading) {\n      return (\n        <div\n          style={{\n            textAlign: \"center\"\n          }}\n        >\n          <img\n            style={{\n              width: \"50%\",\n              height: \"50%\"\n            }}\n            alt=\"spinner\"\n            src={spinner}\n          />\n        </div>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    citySelected: state.citySelected\n  };\n};\n\nRestaurants.propTypes = {\n  citySelected: propTypes.string.isRequired\n};\n\nexport default connect(mapStateToProps)(Restaurants);\n",
        "\nimport React from 'react';\nimport City from \"./City\";\nimport Restaurants from \"./Restaurants\";\nimport { Layout} from \"antd\";\n\nconst { Content } = Layout;\nconst BodyComponent = () => \n\n<Content style={{ minHeight: \"500px\", marginTop:\"50px\" }}>\n<div className=\"container\">\n        <City />\n        <Restaurants />\n</div>\n</Content>\n\nexport default BodyComponent;",
        "import React, * as react from \"react\";\nimport BodyComponent from \"./components/BodyComponent\";\n\nclass App extends react.Component {\n  render() {\n    return (\n      <div>\n        <BodyComponent />\n      </div>\n    );\n  }\n}\n\nexport default App;\n",
        "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n",
        "const initState = {\n    citySelected : \"toronto\"\n}\n\nconst rootReducer = (state = initState, action) => {\nswitch(action.type){\n    case \"SHOW_RESTAURANTS\":\n        return {\n            ...state,\n            citySelected: action.citySelected\n        }      \n    default:  \n        return state\n    }  \n   \n}\n\nexport default rootReducer; ",
        "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, compose } from 'redux';\nimport { Provider } from 'react-redux'\nimport rootReducer from './reducers/rootReducer'\n\nconst store = createStore(rootReducer, compose());\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"
    ],
    "sourceRoot": ""
}